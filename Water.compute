
// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
float resolution;
float timestep;
float accuracy;
//float time;

struct fluid
{
    float x, y, z, vx, vy, vz;
    float temp;
    float r, g, b;
};


float4 Blackbody(float temperature)
{
    if (temperature > 0.0)
    {
        float factor = (6300.0 / (temperature + 0.000001)) * (6300.0 / (temperature + 0.000001));

        float r, g, b;
    
        if (temperature > 2500.0)
        {
            r = 5511.3 / ((pow(abs(1.3 + factor), 4.5) + factor));
            g = 3154.9 / ((pow(abs(1.0 + factor), 4.5) + factor));
            b = 2000.0 / ((pow(abs(0.8 + factor), 4.5) + factor));
        }
        else
        {
            r = max(sqrt(temperature / 5500.0) - 0.11, 0.0);
            g = max(pow(temperature / 6000.0, 1.1) * 1.35 - 0.11, 0.0);
            b = max(pow(temperature / 6500.0, 1.9) * 2.4 - 0.11, 0.0);
        }
    
        r *= 1.01;
        g *= 0.98;
    
        float maxima = max(r, max(b, g)) + 0.00001;
    
        r /= maxima;
        g /= maxima;
        b /= maxima;
    
        return float4(r, g, b, 0.0);
    }
    return float4(0.0, 0.0, 0.0, 0.0);
}

RWStructuredBuffer<fluid> fluidBuffer;

float noise(float x) // crude noise
{
    float result = 0.0;
    float amplitude = 1.0;
    float frequency = 1.0;
    float maximum = 1.0;
    for (int i = 0; i < 10; i++)
    {
        result += sin(x * frequency) * amplitude;
        amplitude *= 0.562839;
        frequency *= 1.785343;
        maximum += amplitude;
    }
    return (result / maximum) * 0.5 + 0.5;
}

float random(float x)
{
    float result = sin((x % 2.943) * 2000.0) * 1000.0;
    return frac(result);
}


float dotProduct(float3 primary, float3 sec)
{
    return primary.x * sec.x + primary.y * sec.y + primary.z * sec.z;
}

float3 normalise(float x, float y, float z)
{
    float mag = sqrt(x * x + y * y + z * z);
    if (mag == 0)
    {
        return float3(0.0, 0.0, 0.0);
    }
    return float3(x, y, z) / mag;
}

float4 lerp4(float4 a, float4 b, float s)
{
    return a * clamp(1.0 - s, 0.0, 1.0) + b * clamp(s, 0.0, 1.0);
}

[numthreads(64, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	// TODO: insert actual code here!
    fluid referenced = fluidBuffer[id.x];
    
    float calc = timestep / accuracy;
    
    float width = sqrt(resolution);
    
    float x = (id.x % sqrt(resolution));
    float y = (floor(id.x / sqrt(resolution)));
    
    //float3 raydir = normalise(random(time), random(time - id.x), random(time + 10.0));
    
    uint num;
    uint stride;
    
    fluidBuffer.GetDimensions(num, stride);
    
    
    float3 delta;
    int count = 0;
    
    for (uint j = 0; j < num; j++)
    {
        fluid ref = fluidBuffer[j];
            
        float dx = ref.x - referenced.x;
        float dy = ref.y - referenced.y;
        float dz = ref.z - referenced.z;
                
        float mag = (dx * dx + dy * dy + dz * dz) + 0.11;
        
        if (mag < 1)
        {
            count++;
        }
    }
    
    for (uint i = 0; i < num; i++)
    {
        if (i != id.x)
        {
            fluid ref = fluidBuffer[i];
            if (ref.x != 0.0 && ref.z != 0.0)
            {
            
                float dx = ref.x - referenced.x;
                float dy = ref.y - referenced.y;
                float dz = ref.z - referenced.z;
                
                float mag = (dx * dx + dy * dy + dz * dz) + 0.125;
                
                
                if (mag < 9.0)
                {
                    delta.x += dx * 0.004 / (mag) * (3.0 - sqrt(mag));
                    delta.y += dy * 0.004 / (mag) * (3.0 - sqrt(mag));
                    delta.z += dz * 0.004 / (mag) * (3.0 - sqrt(mag));
                }
                
                
                //float vmag = sqrt(dvx * dvx + dvy * dvy + dvz + dvz);
                
                
                if (mag < 1.0)
                {
                    float dvx = ref.vx - referenced.vx;
                    float dvy = ref.vy - referenced.vy;
                    float dvz = ref.vz - referenced.vz;
                    float dmag = dotProduct(normalise(dx, dy, dz), normalise(dvx, dvy, dvz));
                
                    if (dmag < 0.0 && (!isnan(dmag)))
                    {
                        float dpx = dvx * 0.005 * dmag;
                        float dpy = dvy * 0.005 * dmag;
                        float dpz = dvz * 0.005 * dmag;
                        
                        dpx /= count;
                        dpy /= count;
                        dpz /= count;
                        
                        delta.x -= dpx;
                        delta.y -= dpy;
                        delta.z -= dpz;
                        
                        fluidBuffer[i].vx += dpx * calc;
                        fluidBuffer[i].vy += dpy * calc;
                        fluidBuffer[i].vz += dpz * calc;
                    }
                    
                    float fmag = 0.25 / (mag * mag * mag * pow(mag, 0.76)) * (1.0 - sqrt(mag));
                    delta.x -= dx * fmag;
                    delta.y -= dy * fmag;
                    delta.z -= dz * fmag;
                    
                    //fluidBuffer[i].vx += dx * fmag * calc;
                    //fluidBuffer[i].vy += dy * fmag * calc;
                    //fluidBuffer[i].vz += dz * fmag * calc;
                }
            }
        }
    }
    
    //for (uint k = 0; k < num; k++)
    //{
    //    float3 pos = float3(referenced.x, referenced.y, referenced.z);
    //    for (int l = 0; l < 5; l++)
    //    {
    //        float mag2 = pos.x * pos.x + pos.y * pos.y + pos.z * pos.z;
    //        float mag = fluidBuffer[i].x * fluidBuffer[i].x + fluidBuffer[i].y * fluidBuffer[i].y + fluidBuffer[i].z * fluidBuffer[i].z;
    //        if (mag - mag2 < 1.0)
    //        {
    //            float t = fluidBuffer[i].temp - referenced.temp;
    //            fluidBuffer[i].temp -= t * timestep / accuracy * 0.0001;
    //            referenced.temp += t * timestep / accuracy * 0.0001;
    //        }
    //        pos += raydir;
    //    }
    //}
    
    
    if (referenced.x < -20.0)
    {
        referenced.vx += calc * (-20.0 - referenced.x) * 0.5;
        referenced.vx *= 0.6;
    }
    if (referenced.z < -20.0)
    {
        referenced.vz += calc * (-20.0 - referenced.z) * 0.5;
        referenced.vy *= 0.6;
    }
    if (referenced.y < -20.0)
    {
        referenced.vy += calc * (-20.0 - referenced.y) * 0.5;
        referenced.vz *= 0.6;
    }    
    if (referenced.x > 20.0)
    {
        referenced.vx += calc * (20.0 - referenced.x) * 0.5;
        referenced.vx *= 0.6;
    }    
    if (referenced.y > 20.0)
    {
        referenced.vy += calc * (20.0 - referenced.y) * 0.5;
        referenced.vy *= 0.6;
    }    
    if (referenced.z > 20.0)
    {
        referenced.vz += calc * (20.0 - referenced.z) * 0.5;
        referenced.vz *= 0.6;
    }
    
    referenced.vy -= 0.05;
    
    
    float4 col = float4(0.7, 0.8, 1.0, 0.0);
    referenced.r = col.r;
    referenced.g = col.g;
    referenced.b = col.b;
    
    referenced.vx += delta.x * calc;
    referenced.vy += delta.y * calc;
    referenced.vz += delta.z * calc;
    
    referenced.y += referenced.vy * 0.01 * calc;
    referenced.x += referenced.vx * 0.01 * calc;
    referenced.z += referenced.vz * 0.01 * calc;
    
    
    fluidBuffer[id.x] = referenced;
}
